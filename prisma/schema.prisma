generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========== ENUMS ==========
enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
  MANAGER
}

enum ChatRole {
  USER
  ASSISTANT
  SYSTEM
}

enum UserStatus {
  INVITED
  ACTIVE
  DISABLED
}

enum ProjectStatus {
  ACTIF
  EN_ATTENTE
  TERMINE
}

enum TaskStatus {
  A_FAIRE
  EN_COURS
  TERMINEE
}

enum TaskSeverity {
  FAIBLE
  MOYENNE
  HAUTE
  CRITIQUE
}

// ========== MODELS ==========

model ActivityLog {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  action      String
  status      String
  description String?
  ipAddress   String?
  device      String?
  userAgent   String?
  sessionId   String?
  createdAt   DateTime @default(now())
  session     Session? @relation("SessionToActivityLogs", fields: [sessionId], references: [id])

  @@index([action])
  @@index([userId])
  @@index([createdAt])
  @@index([status])
}

model User {
  id           String               @id @default(cuid())
  email        String               @unique
  password     String
  name         String?
  role         Role                 @default(EMPLOYEE)
  status       UserStatus           @default(INVITED)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  lastLogin    DateTime?
  isDeleted    Boolean?
  user_role    String?
  twoFaEnabled Boolean              @default(false)
  twoFaSecret  String?
  readMessages ProjectMessageRead[]

  documents       Document[]       @relation("Uploader")
  updatedDocs     Document[]       @relation("Updater")
  projects        ProjectMember[]
  invites         Invite[]         @relation("Inviter")
  conversations   Conversation[]
  messages        Message[]
  projectMessages ProjectMessage[]
  activityLogs    ActivityLog[]
  sessions        Session[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  archived    Boolean       @default(false)
  status      ProjectStatus @default(ACTIF)
  startDate   DateTime?
  endDate     DateTime?

  members       ProjectMember[]
  documents     Document[]
  storagePolicy StoragePolicy?
  tasks         Task[]
  messages      ProjectMessage[]
}

model ProjectMember {
  id        String      @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole
  createdAt DateTime    @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  assignee    String
  severity    TaskSeverity @default(MOYENNE)
  status      TaskStatus   @default(A_FAIRE)
  startDate   DateTime
  deadline    DateTime
  endDate     DateTime?
  createdAt   DateTime     @default(now())
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id])

  dependencies Task[] @relation("TaskDependencies")
  dependedBy   Task[] @relation("TaskDependencies")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  description String?
  url         String
  type        String
  size        Int
  archived    Boolean  @default(false)
  favorite    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  updatedById String?
  projectId   String
  storageId   String?

  uploadedBy User     @relation("Uploader", fields: [userId], references: [id], onDelete: Cascade)
  updatedBy  User?    @relation("Updater", fields: [updatedById], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
  storage    Storage? @relation(fields: [storageId], references: [id])
  tags       Tag[]    @relation("DocumentTags")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique(map: "Tag_name_unique")
  documents Document[] @relation("DocumentTags")
}

model Storage {
  id        String     @id @default(cuid())
  s3Bucket  String
  documents Document[]

  @@index([s3Bucket])
}

model StoragePolicy {
  id            String  @id @default(cuid())
  projectId     String  @unique
  maxSizeMb     Int
  allowedTypes  String?
  retentionDays Int?

  project Project @relation(fields: [projectId], references: [id])
}

model Invite {
  id               String   @id @default(cuid())
  email            String
  token            String   @unique
  role             Role
  invitedByAdminId String
  createdAt        DateTime @default(now())

  invitedBy User @relation("Inviter", fields: [invitedByAdminId], references: [id])
}

// ====== ENTERPRISE CHAT: ProjectMessage & FileAttachment ======
model ProjectMessage {
  id        String               @id @default(cuid())
  content   String?
  fileUrl   String?
  fileName  String?
  fileType  String?
  createdAt DateTime             @default(now())
  userId    String
  projectId String
  reads     ProjectMessageRead[]

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// (Optional future: a dedicated FileAttachment model for richer metadata)

// ==== AI Conversation (leave as is, for AI chat only, not project chat) ====
model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id          String   @id @default(cuid())
  role        ChatRole
  content     String
  metadata    Json?
  liked       Boolean? @default(false)
  disliked    Boolean? @default(false)
  embeddingId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId         String?
  conversationId String

  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Session {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  lastUsedAt   DateTime      @updatedAt
  expiresAt    DateTime
  userAgent    String?
  device       String?
  ipAddress    String?
  geoCountry   String?
  geoCity      String?
  activityLogs ActivityLog[] @relation("SessionToActivityLogs")

  @@index([userId])
}

model ProjectMessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message ProjectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@index([messageId])
}
