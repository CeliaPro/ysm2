generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
  MANAGER // ✅ Restored if used in the DB
}

enum ChatRole {
  USER
  ASSISTANT
  SYSTEM
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // ✅ Preserved legacy fields
  isDeleted Boolean?
  user_role String?

  // Relations
  projects      ProjectMember[]
  documents     Document[]
  invites       Invite[]        @relation("Inviter")
  conversations Conversation[]
  messages      Message[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ✅ Preserved if still used
  archived Boolean @default(false)

  members       ProjectMember[]
  documents     Document[]
  storagePolicy StoragePolicy?
}

model ProjectMember {
  id        String      @id @default(cuid())
  userId    String
  projectId String
  role      ProjectRole

  // ✅ Preserved if used
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Document {
  id          String   @id
  name        String
  description String?
  url         String
  type        String
  size        Int
  archived    Boolean  @default(false)
  favorite    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId    String
  projectId String
  storageId String?

  user    User     @relation(fields: [userId], references: [id])
  project Project  @relation(fields: [projectId], references: [id])
  storage Storage? @relation(fields: [storageId], references: [id])
  tags    Tag[]    @relation("DocumentTags")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique(map: "Tag_name_unique") // ✅ Fix duplicate constraint name
  documents Document[] @relation("DocumentTags")
}

model Storage {
  id        String     @id @default(cuid())
  s3Bucket  String
  documents Document[]

  @@index([s3Bucket])
}

model StoragePolicy {
  id            String  @id @default(cuid())
  projectId     String  @unique
  maxSizeMb     Int
  allowedTypes  String? // comma-separated
  retentionDays Int?

  project Project @relation(fields: [projectId], references: [id])
}

model Invite {
  id               String   @id @default(cuid())
  email            String
  token            String   @unique
  role             Role
  invitedByAdminId String
  createdAt        DateTime @default(now())

  invitedBy User @relation("Inviter", fields: [invitedByAdminId], references: [id])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  messages Message[]
}

model Message {
  id          String   @id @default(cuid())
  role        ChatRole
  content     String
  metadata    Json?
  liked       Boolean? @default(false)
  disliked    Boolean? @default(false)
  embeddingId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId         String?
  conversationId String

  user         User?        @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}
